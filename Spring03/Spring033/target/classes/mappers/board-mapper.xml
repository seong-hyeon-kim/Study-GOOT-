<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.spring.ex03.BoardMapper">
<!-- namespace : dao 클래스의 sqlSession과 연결하기 위한 키로 사용 -->

	<!-- 
	mapper 태그
	<insert>, <select>, <update>, <delete>
	dao - sqlSession의 함수(insert, selectOne, selectList, update, delete)와
	매핑되어 쿼리를 수행
	 -->
	 
	 <!-- 
	 insert into test_board (board_title, board_content, member_id)
	 values (?, ?, ?);
	  -->
	  
	  <!-- id : dao 클래스의 sqlSession 특정 함수와 연결하기 위해 사용 -->
	  
	  <!-- 
	  ${key 이름} : mybatis-config.xml의 property - name과 매칭. DB 테이블의 컬럼
	  #{key 이름} : dao 클래스 sqlSession에서 전송받은 데이터(입력받은 데이터)
	   -->
	   
	   <!-- 등록 -->
	   <insert id="insert">
	   		insert into ${test_board} (${boardTitle}, ${boardContent}, ${memberId})
	   		values (#{boardTitle}, #{boardContent}, #{memberId}) 
	   </insert>
	   
	   <!-- 전체검색 -->
	   <select id="select_all" resultType="BoardVO">
	   		select * from ${test_board}
	   		order by ${boardId} desc
	   </select>
	   
	   <!-- 상세검색(하나만 검색), #은 물음표 -->
	   <select id="select_by_board_id" resultType="BoardVO">
	   		select * from ${test_board} where ${boardId} = #{boardId}
	   </select>
	   
	   <!-- 수정 -->
	   <update id="update">
	   		update ${test_board}
	   		set ${boardTitle} = #{boardTitle}, ${boardContent} = #{boardContent}
	   		where ${boardId} = #{boardId}
	   </update>
	   
	   <!-- 삭제 -->
	   <delete id="delete">
	   		delete from ${test_board}
	   		where ${boardId} = #{boardId}
	   </delete>
	   
	   <!-- 페이징 처리 -->
	   <select id="paging" resultType="BoardVO">
       		select b.${boardId}, b.${boardTitle}, b.${boardContent}, b.${memberId}, b.${boardDateCreated}, b.${replyCnt} from(
          		select rownum rn, a.* from(
             		select * from ${test_board} order by ${boardId} desc
         		 )a
       		)b where rn between #{start} and #{end}
	   </select>
	   
	   <!-- 
	   #{start} : criteria.getStart()
	   #{end} : criteria.getEnd()
	    -->
	    
	    <select id="total_count" resultType="Integer"><!-- 정수형 참조타입 -->
	    	select count(*) total_cnt from ${test_board}
	    </select>
	    
	    <select id="select_by_memberId" resultType="BoardVO">
	    	select * from ${test_board}
	    	where ${memberId} like #{memberId}
	    </select>
	    
	    <select id="select_by_title_content" resultType="BoardVO">
	    	select * from ${test_board}
	    	where ${boardTitle} like #{keyword} or
	    		${boardContent} like #{keyword}
	    		order by ${boardId} desc
	    </select>
	    
	    <!-- 댓글 수가 추가 되면 +1, 삭제되면 -1을 다 할 수 있게 하기 위해 물음표를 넣어야 하고 그게 ${amount} -->
	    <update id="update_reply_cnt">
	    	update ${test_board}
	    	set ${replyCnt} = ${replyCnt} + #{amount}
	    	where ${boardId} = #{boardId}
	    </update>
</mapper>